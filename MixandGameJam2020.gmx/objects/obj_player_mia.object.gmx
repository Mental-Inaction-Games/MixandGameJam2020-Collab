<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
<<<<<<< Updated upstream
  <spriteName>spr_player_mia_stand_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
=======
  <spriteName>spr_player_mia</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
>>>>>>> Stashed changes
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Initiate
vx = 0;
vy = 0;
player_speed = 1;
player_state = "state_walk";
<<<<<<< Updated upstream
direction = 270;
face_dir = "down"; //used to keep track of which of the 4 directional sprites the player is uing. Need this for attacking animation

//Determines how long the player stays in the attacking state
attack_timer = 0;
attack_timer_max = 30;
=======
>>>>>>> Stashed changes
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Player Movement buttons
<<<<<<< Updated upstream
left = keyboard_check(vk_left);
right = keyboard_check(vk_right);
up = keyboard_check(vk_up);
down = keyboard_check(vk_down);
attack = keyboard_check_pressed(ord("Z"));
=======
left = keyboard_check(ord('A'));
right = keyboard_check(ord('D'));
up = keyboard_check(ord('W'));
down = keyboard_check(ord('S'));
>>>>>>> Stashed changes

if!(game_is_paused()){
    //finite state machine
    switch(player_state){
        case "state_walk":
<<<<<<< Updated upstream
            //set x and y velocity according to player inputs
=======
>>>>>>> Stashed changes
            vx = (right - left) * player_speed;
            vy = (down - up) * player_speed;
            
            //get direction the player is holding, if the player is holding a direction. This is used for animation
            if((left)or(up)or(right)or(down)){
                direction = point_direction(0,0,right - left,down - up);
            };
            
            //Move to attacking state if Z is pressed
            if(attack){
                player_state = "state_attack";
                image_index = 0;
                attack_timer = attack_timer_max;
                vx = 0;
                vy = 0;
            };
            break;
            
        case "state_attack":
            if(attack_timer &gt; 0){
                //create attack object after certain frame
                if((attack_timer &lt; attack_timer_max - 12)and!(instance_exists(obj_attack_player))){
                    instance_create(x+lengthdir_x(16,direction),y+lengthdir_y(16,direction),obj_attack_player);
                };
                attack_timer--;
            }else{
                //destroy attack object, if it exists, and then exit state
                if(instance_exists(obj_attack_player)){
                    with(obj_attack_player){
                        instance_destroy();
                    };
                };
                player_state = "state_walk";
            };
            break;
<<<<<<< Updated upstream
=======
    
>>>>>>> Stashed changes
    };
    
    //physics
    if!(place_meeting(x + vx, y, obj_solid)){
        x += vx;
    };
    if!(place_meeting(x, y + vy, obj_solid)){
        y += vy;
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
<<<<<<< Updated upstream
            <string>if!(game_is_paused()){
    //finite state machine
    switch(player_state){
        case "state_walk":
            //sprites to use when moving
            if((left)or(up)or(right)or(down)){
                image_speed = 0.15;
                //RIGHT
                if(direction == 0){
                    sprite_index = spr_player_mia_walk_right;face_dir = "right";
                //UP
                }else if(direction == 90){
                    sprite_index = spr_player_mia_walk_up;face_dir = "up";
                //LEFT
                }else if(direction == 180){
                    sprite_index = spr_player_mia_walk_left;face_dir = "left";
                //DOWN
                }else if(direction == 270){
                    sprite_index = spr_player_mia_walk_down;face_dir = "down";
                };
            //sprites to use while standing still
            }else{
                image_speed = 0;
                //RIGHT
                if(face_dir == "right"){
                    sprite_index = spr_player_mia_stand_right;direction = 0;
                //UP
                }else if(face_dir == "up"){
                    sprite_index = spr_player_mia_stand_up;direction = 90;
                //LEFT
                }else if(face_dir == "left"){
                    sprite_index = spr_player_mia_stand_left;direction = 180;
                //DOWN
                }else if(face_dir == "down"){
                    sprite_index = spr_player_mia_stand_down;direction = 270;
                };
            };
            break;
            
        case "state_attack":
            //stop the animation before it loops
            if(image_index &lt; image_number){
                image_speed = 0.15;
            }else{
                image_speed = 0;
            };

            //RIGHT
            if(face_dir == "right"){
                sprite_index = spr_player_mia_attack_right;
                direction = 0;
            //UP
            }else if(face_dir == "up"){
                sprite_index = spr_player_mia_attack_up;
                direction = 90;
            //LEFT
            }else if(face_dir == "left"){
                sprite_index = spr_player_mia_attack_left;
                direction = 180;
                //draw pan sprite
                if((image_index &gt;= 1)and(image_index &lt; 2)){
                    draw_sprite(spr_player_pan_left,0,x+3,y-9);
                }else if(image_index &gt;= 2){
                    draw_sprite(spr_player_pan_left,1,x-20,y-1);
                };
            //DOWN
            }else if(face_dir == "down"){
                sprite_index = spr_player_mia_attack_down;
                direction = 270;
            };
            break;
    };
};

//draw player sprite
draw_sprite_ext(sprite_index,image_index,round(x),round(y),image_xscale,image_yscale,image_angle,image_blend,image_alpha);
=======
            <string>draw_sprite_ext(sprite_index,image_index,round(x),round(y),image_xscale,image_yscale,image_angle,image_blend,image_alpha);
>>>>>>> Stashed changes
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
